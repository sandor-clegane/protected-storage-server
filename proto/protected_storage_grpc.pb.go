// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: protected_storage.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GrpcService_CreateUser_FullMethodName            = "/server.GrpcService/CreateUser"
	GrpcService_LoginUser_FullMethodName             = "/server.GrpcService/LoginUser"
	GrpcService_SaveRawData_FullMethodName           = "/server.GrpcService/SaveRawData"
	GrpcService_SaveLoginWithPassword_FullMethodName = "/server.GrpcService/SaveLoginWithPassword"
	GrpcService_SaveBinaryData_FullMethodName        = "/server.GrpcService/SaveBinaryData"
	GrpcService_SaveCardData_FullMethodName          = "/server.GrpcService/SaveCardData"
	GrpcService_GetRawData_FullMethodName            = "/server.GrpcService/GetRawData"
	GrpcService_GetLoginWithPassword_FullMethodName  = "/server.GrpcService/GetLoginWithPassword"
	GrpcService_GetBinaryData_FullMethodName         = "/server.GrpcService/GetBinaryData"
	GrpcService_GetCardData_FullMethodName           = "/server.GrpcService/GetCardData"
	GrpcService_GetAllSavedDataNames_FullMethodName  = "/server.GrpcService/GetAllSavedDataNames"
)

// GrpcServiceClient is the client API for GrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcServiceClient interface {
	CreateUser(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*AuthorizedResponse, error)
	LoginUser(ctx context.Context, in *UserAuthorizedRequest, opts ...grpc.CallOption) (*AuthorizedResponse, error)
	SaveRawData(ctx context.Context, in *SaveRawDataRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	SaveLoginWithPassword(ctx context.Context, in *SaveLoginWithPasswordRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	SaveBinaryData(ctx context.Context, in *SaveBinaryDataRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	SaveCardData(ctx context.Context, in *SaveCardDataRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	GetRawData(ctx context.Context, in *GetRawDataRequest, opts ...grpc.CallOption) (*GetRawDataResponse, error)
	GetLoginWithPassword(ctx context.Context, in *GetLoginWithPasswordRequest, opts ...grpc.CallOption) (*GetLoginWithPasswordResponse, error)
	GetBinaryData(ctx context.Context, in *GetBinaryDataRequest, opts ...grpc.CallOption) (*GetBinaryDataResponse, error)
	GetCardData(ctx context.Context, in *GetCardDataRequest, opts ...grpc.CallOption) (*GetCardDataResponse, error)
	GetAllSavedDataNames(ctx context.Context, in *GetAllSavedDataNamesRequest, opts ...grpc.CallOption) (*GetAllSavedDataNamesResponse, error)
}

type grpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcServiceClient(cc grpc.ClientConnInterface) GrpcServiceClient {
	return &grpcServiceClient{cc}
}

func (c *grpcServiceClient) CreateUser(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*AuthorizedResponse, error) {
	out := new(AuthorizedResponse)
	err := c.cc.Invoke(ctx, GrpcService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) LoginUser(ctx context.Context, in *UserAuthorizedRequest, opts ...grpc.CallOption) (*AuthorizedResponse, error) {
	out := new(AuthorizedResponse)
	err := c.cc.Invoke(ctx, GrpcService_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) SaveRawData(ctx context.Context, in *SaveRawDataRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, GrpcService_SaveRawData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) SaveLoginWithPassword(ctx context.Context, in *SaveLoginWithPasswordRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, GrpcService_SaveLoginWithPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) SaveBinaryData(ctx context.Context, in *SaveBinaryDataRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, GrpcService_SaveBinaryData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) SaveCardData(ctx context.Context, in *SaveCardDataRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, GrpcService_SaveCardData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) GetRawData(ctx context.Context, in *GetRawDataRequest, opts ...grpc.CallOption) (*GetRawDataResponse, error) {
	out := new(GetRawDataResponse)
	err := c.cc.Invoke(ctx, GrpcService_GetRawData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) GetLoginWithPassword(ctx context.Context, in *GetLoginWithPasswordRequest, opts ...grpc.CallOption) (*GetLoginWithPasswordResponse, error) {
	out := new(GetLoginWithPasswordResponse)
	err := c.cc.Invoke(ctx, GrpcService_GetLoginWithPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) GetBinaryData(ctx context.Context, in *GetBinaryDataRequest, opts ...grpc.CallOption) (*GetBinaryDataResponse, error) {
	out := new(GetBinaryDataResponse)
	err := c.cc.Invoke(ctx, GrpcService_GetBinaryData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) GetCardData(ctx context.Context, in *GetCardDataRequest, opts ...grpc.CallOption) (*GetCardDataResponse, error) {
	out := new(GetCardDataResponse)
	err := c.cc.Invoke(ctx, GrpcService_GetCardData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) GetAllSavedDataNames(ctx context.Context, in *GetAllSavedDataNamesRequest, opts ...grpc.CallOption) (*GetAllSavedDataNamesResponse, error) {
	out := new(GetAllSavedDataNamesResponse)
	err := c.cc.Invoke(ctx, GrpcService_GetAllSavedDataNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcServiceServer is the server API for GrpcService service.
// All implementations must embed UnimplementedGrpcServiceServer
// for forward compatibility
type GrpcServiceServer interface {
	CreateUser(context.Context, *UserRegisterRequest) (*AuthorizedResponse, error)
	LoginUser(context.Context, *UserAuthorizedRequest) (*AuthorizedResponse, error)
	SaveRawData(context.Context, *SaveRawDataRequest) (*ErrorResponse, error)
	SaveLoginWithPassword(context.Context, *SaveLoginWithPasswordRequest) (*ErrorResponse, error)
	SaveBinaryData(context.Context, *SaveBinaryDataRequest) (*ErrorResponse, error)
	SaveCardData(context.Context, *SaveCardDataRequest) (*ErrorResponse, error)
	GetRawData(context.Context, *GetRawDataRequest) (*GetRawDataResponse, error)
	GetLoginWithPassword(context.Context, *GetLoginWithPasswordRequest) (*GetLoginWithPasswordResponse, error)
	GetBinaryData(context.Context, *GetBinaryDataRequest) (*GetBinaryDataResponse, error)
	GetCardData(context.Context, *GetCardDataRequest) (*GetCardDataResponse, error)
	GetAllSavedDataNames(context.Context, *GetAllSavedDataNamesRequest) (*GetAllSavedDataNamesResponse, error)
	mustEmbedUnimplementedGrpcServiceServer()
}

// UnimplementedGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServiceServer struct {
}

func (UnimplementedGrpcServiceServer) CreateUser(context.Context, *UserRegisterRequest) (*AuthorizedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedGrpcServiceServer) LoginUser(context.Context, *UserAuthorizedRequest) (*AuthorizedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedGrpcServiceServer) SaveRawData(context.Context, *SaveRawDataRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRawData not implemented")
}
func (UnimplementedGrpcServiceServer) SaveLoginWithPassword(context.Context, *SaveLoginWithPasswordRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLoginWithPassword not implemented")
}
func (UnimplementedGrpcServiceServer) SaveBinaryData(context.Context, *SaveBinaryDataRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBinaryData not implemented")
}
func (UnimplementedGrpcServiceServer) SaveCardData(context.Context, *SaveCardDataRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCardData not implemented")
}
func (UnimplementedGrpcServiceServer) GetRawData(context.Context, *GetRawDataRequest) (*GetRawDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawData not implemented")
}
func (UnimplementedGrpcServiceServer) GetLoginWithPassword(context.Context, *GetLoginWithPasswordRequest) (*GetLoginWithPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginWithPassword not implemented")
}
func (UnimplementedGrpcServiceServer) GetBinaryData(context.Context, *GetBinaryDataRequest) (*GetBinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBinaryData not implemented")
}
func (UnimplementedGrpcServiceServer) GetCardData(context.Context, *GetCardDataRequest) (*GetCardDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardData not implemented")
}
func (UnimplementedGrpcServiceServer) GetAllSavedDataNames(context.Context, *GetAllSavedDataNamesRequest) (*GetAllSavedDataNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSavedDataNames not implemented")
}
func (UnimplementedGrpcServiceServer) mustEmbedUnimplementedGrpcServiceServer() {}

// UnsafeGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServiceServer will
// result in compilation errors.
type UnsafeGrpcServiceServer interface {
	mustEmbedUnimplementedGrpcServiceServer()
}

func RegisterGrpcServiceServer(s grpc.ServiceRegistrar, srv GrpcServiceServer) {
	s.RegisterService(&GrpcService_ServiceDesc, srv)
}

func _GrpcService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).CreateUser(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthorizedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).LoginUser(ctx, req.(*UserAuthorizedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_SaveRawData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRawDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).SaveRawData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcService_SaveRawData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).SaveRawData(ctx, req.(*SaveRawDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_SaveLoginWithPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveLoginWithPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).SaveLoginWithPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcService_SaveLoginWithPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).SaveLoginWithPassword(ctx, req.(*SaveLoginWithPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_SaveBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).SaveBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcService_SaveBinaryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).SaveBinaryData(ctx, req.(*SaveBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_SaveCardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCardDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).SaveCardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcService_SaveCardData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).SaveCardData(ctx, req.(*SaveCardDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_GetRawData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRawDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).GetRawData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcService_GetRawData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).GetRawData(ctx, req.(*GetRawDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_GetLoginWithPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginWithPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).GetLoginWithPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcService_GetLoginWithPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).GetLoginWithPassword(ctx, req.(*GetLoginWithPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_GetBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).GetBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcService_GetBinaryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).GetBinaryData(ctx, req.(*GetBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_GetCardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).GetCardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcService_GetCardData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).GetCardData(ctx, req.(*GetCardDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_GetAllSavedDataNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSavedDataNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).GetAllSavedDataNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcService_GetAllSavedDataNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).GetAllSavedDataNames(ctx, req.(*GetAllSavedDataNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcService_ServiceDesc is the grpc.ServiceDesc for GrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.GrpcService",
	HandlerType: (*GrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _GrpcService_CreateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _GrpcService_LoginUser_Handler,
		},
		{
			MethodName: "SaveRawData",
			Handler:    _GrpcService_SaveRawData_Handler,
		},
		{
			MethodName: "SaveLoginWithPassword",
			Handler:    _GrpcService_SaveLoginWithPassword_Handler,
		},
		{
			MethodName: "SaveBinaryData",
			Handler:    _GrpcService_SaveBinaryData_Handler,
		},
		{
			MethodName: "SaveCardData",
			Handler:    _GrpcService_SaveCardData_Handler,
		},
		{
			MethodName: "GetRawData",
			Handler:    _GrpcService_GetRawData_Handler,
		},
		{
			MethodName: "GetLoginWithPassword",
			Handler:    _GrpcService_GetLoginWithPassword_Handler,
		},
		{
			MethodName: "GetBinaryData",
			Handler:    _GrpcService_GetBinaryData_Handler,
		},
		{
			MethodName: "GetCardData",
			Handler:    _GrpcService_GetCardData_Handler,
		},
		{
			MethodName: "GetAllSavedDataNames",
			Handler:    _GrpcService_GetAllSavedDataNames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protected_storage.proto",
}
